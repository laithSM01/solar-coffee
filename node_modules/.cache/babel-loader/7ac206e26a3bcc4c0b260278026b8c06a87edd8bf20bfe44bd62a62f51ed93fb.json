{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LineBreaker = exports.inlineBreakOpportunities = exports.lineBreakAtIndex = exports.codePointsToCharacterClasses = exports.UnicodeTrie = exports.BREAK_ALLOWED = exports.BREAK_NOT_ALLOWED = exports.BREAK_MANDATORY = exports.classes = exports.LETTER_NUMBER_MODIFIER = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\nvar _Trie = require('./Trie');\nvar _linebreakTrie = require('./linebreak-trie');\nvar _linebreakTrie2 = _interopRequireDefault(_linebreakTrie);\nvar _Util = require('./Util');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar LETTER_NUMBER_MODIFIER = exports.LETTER_NUMBER_MODIFIER = 50;\n\n// Non-tailorable Line Breaking Classes\nvar BK = 1; //  Cause a line break (after)\nvar CR = 2; //  Cause a line break (after), except between CR and LF\nvar LF = 3; //  Cause a line break (after)\nvar CM = 4; //  Prohibit a line break between the character and the preceding character\nvar NL = 5; //  Cause a line break (after)\nvar SG = 6; //  Do not occur in well-formed text\nvar WJ = 7; //  Prohibit line breaks before and after\nvar ZW = 8; //  Provide a break opportunity\nvar GL = 9; //  Prohibit line breaks before and after\nvar SP = 10; // Enable indirect line breaks\nvar ZWJ = 11; // Prohibit line breaks within joiner sequences\n// Break Opportunities\nvar B2 = 12; //  Provide a line break opportunity before and after the character\nvar BA = 13; //  Generally provide a line break opportunity after the character\nvar BB = 14; //  Generally provide a line break opportunity before the character\nvar HY = 15; //  Provide a line break opportunity after the character, except in numeric context\nvar CB = 16; //   Provide a line break opportunity contingent on additional information\n// Characters Prohibiting Certain Breaks\nvar CL = 17; //  Prohibit line breaks before\nvar CP = 18; //  Prohibit line breaks before\nvar EX = 19; //  Prohibit line breaks before\nvar IN = 20; //  Allow only indirect line breaks between pairs\nvar NS = 21; //  Allow only indirect line breaks before\nvar OP = 22; //  Prohibit line breaks after\nvar QU = 23; //  Act like they are both opening and closing\n// Numeric Context\nvar IS = 24; //  Prevent breaks after any and before numeric\nvar NU = 25; //  Form numeric expressions for line breaking purposes\nvar PO = 26; //  Do not break following a numeric expression\nvar PR = 27; //  Do not break in front of a numeric expression\nvar SY = 28; //  Prevent a break before; and allow a break after\n// Other Characters\nvar AI = 29; //  Act like AL when the resolvedEAW is N; otherwise; act as ID\nvar AL = 30; //  Are alphabetic characters or symbols that are used with alphabetic characters\nvar CJ = 31; //  Treat as NS or ID for strict or normal breaking.\nvar EB = 32; //  Do not break from following Emoji Modifier\nvar EM = 33; //  Do not break from preceding Emoji Base\nvar H2 = 34; //  Form Korean syllable blocks\nvar H3 = 35; //  Form Korean syllable blocks\nvar HL = 36; //  Do not break around a following hyphen; otherwise act as Alphabetic\nvar ID = 37; //  Break before or after; except in some numeric context\nvar JL = 38; //  Form Korean syllable blocks\nvar JV = 39; //  Form Korean syllable blocks\nvar JT = 40; //  Form Korean syllable blocks\nvar RI = 41; //  Keep pairs together. For pairs; break before and after other classes\nvar SA = 42; //  Provide a line break opportunity contingent on additional, language-specific context analysis\nvar XX = 43; //  Have as yet unknown line breaking behavior or unassigned code positions\n\nvar classes = exports.classes = {\n  BK: BK,\n  CR: CR,\n  LF: LF,\n  CM: CM,\n  NL: NL,\n  SG: SG,\n  WJ: WJ,\n  ZW: ZW,\n  GL: GL,\n  SP: SP,\n  ZWJ: ZWJ,\n  B2: B2,\n  BA: BA,\n  BB: BB,\n  HY: HY,\n  CB: CB,\n  CL: CL,\n  CP: CP,\n  EX: EX,\n  IN: IN,\n  NS: NS,\n  OP: OP,\n  QU: QU,\n  IS: IS,\n  NU: NU,\n  PO: PO,\n  PR: PR,\n  SY: SY,\n  AI: AI,\n  AL: AL,\n  CJ: CJ,\n  EB: EB,\n  EM: EM,\n  H2: H2,\n  H3: H3,\n  HL: HL,\n  ID: ID,\n  JL: JL,\n  JV: JV,\n  JT: JT,\n  RI: RI,\n  SA: SA,\n  XX: XX\n};\nvar BREAK_MANDATORY = exports.BREAK_MANDATORY = '!';\nvar BREAK_NOT_ALLOWED = exports.BREAK_NOT_ALLOWED = '×';\nvar BREAK_ALLOWED = exports.BREAK_ALLOWED = '÷';\nvar UnicodeTrie = exports.UnicodeTrie = (0, _Trie.createTrieFromBase64)(_linebreakTrie2.default);\nvar ALPHABETICS = [AL, HL];\nvar HARD_LINE_BREAKS = [BK, CR, LF, NL];\nvar SPACE = [SP, ZW];\nvar PREFIX_POSTFIX = [PR, PO];\nvar LINE_BREAKS = HARD_LINE_BREAKS.concat(SPACE);\nvar KOREAN_SYLLABLE_BLOCK = [JL, JV, JT, H2, H3];\nvar HYPHEN = [HY, BA];\nvar codePointsToCharacterClasses = exports.codePointsToCharacterClasses = function codePointsToCharacterClasses(codePoints) {\n  var lineBreak = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'strict';\n  var types = [];\n  var indicies = [];\n  var categories = [];\n  codePoints.forEach(function (codePoint, index) {\n    var classType = UnicodeTrie.get(codePoint);\n    if (classType > LETTER_NUMBER_MODIFIER) {\n      categories.push(true);\n      classType -= LETTER_NUMBER_MODIFIER;\n    } else {\n      categories.push(false);\n    }\n    if (['normal', 'auto', 'loose'].indexOf(lineBreak) !== -1) {\n      // U+2010, – U+2013, 〜 U+301C, ゠ U+30A0\n      if ([0x2010, 0x2013, 0x301c, 0x30a0].indexOf(codePoint) !== -1) {\n        indicies.push(index);\n        return types.push(CB);\n      }\n    }\n    if (classType === CM || classType === ZWJ) {\n      // LB10 Treat any remaining combining mark or ZWJ as AL.\n      if (index === 0) {\n        indicies.push(index);\n        return types.push(AL);\n      }\n\n      // LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of\n      // the base character in all of the following rules. Treat ZWJ as if it were CM.\n      var prev = types[index - 1];\n      if (LINE_BREAKS.indexOf(prev) === -1) {\n        indicies.push(indicies[index - 1]);\n        return types.push(prev);\n      }\n      indicies.push(index);\n      return types.push(AL);\n    }\n    indicies.push(index);\n    if (classType === CJ) {\n      return types.push(lineBreak === 'strict' ? NS : ID);\n    }\n    if (classType === SA) {\n      return types.push(AL);\n    }\n    if (classType === AI) {\n      return types.push(AL);\n    }\n\n    // For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL\n    // and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised\n    // to take into account the actual line breaking properties for these characters.\n    if (classType === XX) {\n      if (codePoint >= 0x20000 && codePoint <= 0x2fffd || codePoint >= 0x30000 && codePoint <= 0x3fffd) {\n        return types.push(ID);\n      } else {\n        return types.push(AL);\n      }\n    }\n    types.push(classType);\n  });\n  return [indicies, types, categories];\n};\nvar isAdjacentWithSpaceIgnored = function isAdjacentWithSpaceIgnored(a, b, currentIndex, classTypes) {\n  var current = classTypes[currentIndex];\n  if (Array.isArray(a) ? a.indexOf(current) !== -1 : a === current) {\n    var i = currentIndex;\n    while (i <= classTypes.length) {\n      i++;\n      var next = classTypes[i];\n      if (next === b) {\n        return true;\n      }\n      if (next !== SP) {\n        break;\n      }\n    }\n  }\n  if (current === SP) {\n    var _i = currentIndex;\n    while (_i > 0) {\n      _i--;\n      var prev = classTypes[_i];\n      if (Array.isArray(a) ? a.indexOf(prev) !== -1 : a === prev) {\n        var n = currentIndex;\n        while (n <= classTypes.length) {\n          n++;\n          var _next = classTypes[n];\n          if (_next === b) {\n            return true;\n          }\n          if (_next !== SP) {\n            break;\n          }\n        }\n      }\n      if (prev !== SP) {\n        break;\n      }\n    }\n  }\n  return false;\n};\nvar previousNonSpaceClassType = function previousNonSpaceClassType(currentIndex, classTypes) {\n  var i = currentIndex;\n  while (i >= 0) {\n    var type = classTypes[i];\n    if (type === SP) {\n      i--;\n    } else {\n      return type;\n    }\n  }\n  return 0;\n};\nvar _lineBreakAtIndex = function _lineBreakAtIndex(codePoints, classTypes, indicies, index, forbiddenBreaks) {\n  if (indicies[index] === 0) {\n    return BREAK_NOT_ALLOWED;\n  }\n  var currentIndex = index - 1;\n  if (Array.isArray(forbiddenBreaks) && forbiddenBreaks[currentIndex] === true) {\n    return BREAK_NOT_ALLOWED;\n  }\n  var beforeIndex = currentIndex - 1;\n  var afterIndex = currentIndex + 1;\n  var current = classTypes[currentIndex];\n\n  // LB4 Always break after hard line breaks.\n  // LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.\n  var before = beforeIndex >= 0 ? classTypes[beforeIndex] : 0;\n  var next = classTypes[afterIndex];\n  if (current === CR && next === LF) {\n    return BREAK_NOT_ALLOWED;\n  }\n  if (HARD_LINE_BREAKS.indexOf(current) !== -1) {\n    return BREAK_MANDATORY;\n  }\n\n  // LB6 Do not break before hard line breaks.\n  if (HARD_LINE_BREAKS.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB7 Do not break before spaces or zero width space.\n  if (SPACE.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB8 Break before any character following a zero-width space, even if one or more spaces intervene.\n  if (previousNonSpaceClassType(currentIndex, classTypes) === ZW) {\n    return BREAK_ALLOWED;\n  }\n\n  // LB8a Do not break between a zero width joiner and an ideograph, emoji base or emoji modifier.\n  if (UnicodeTrie.get(codePoints[currentIndex]) === ZWJ && (next === ID || next === EB || next === EM)) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB11 Do not break before or after Word joiner and related characters.\n  if (current === WJ || next === WJ) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB12 Do not break after NBSP and related characters.\n  if (current === GL) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB12a Do not break before NBSP and related characters, except after spaces and hyphens.\n  if ([SP, BA, HY].indexOf(current) === -1 && next === GL) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.\n  if ([CL, CP, EX, IS, SY].indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB14 Do not break after ‘[’, even after spaces.\n  if (previousNonSpaceClassType(currentIndex, classTypes) === OP) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB15 Do not break within ‘”[’, even with intervening spaces.\n  if (isAdjacentWithSpaceIgnored(QU, OP, currentIndex, classTypes)) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.\n  if (isAdjacentWithSpaceIgnored([CL, CP], NS, currentIndex, classTypes)) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB17 Do not break within ‘——’, even with intervening spaces.\n  if (isAdjacentWithSpaceIgnored(B2, B2, currentIndex, classTypes)) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB18 Break after spaces.\n  if (current === SP) {\n    return BREAK_ALLOWED;\n  }\n\n  // LB19 Do not break before or after quotation marks, such as ‘ ” ’.\n  if (current === QU || next === QU) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB20 Break before and after unresolved CB.\n  if (next === CB || current === CB) {\n    return BREAK_ALLOWED;\n  }\n\n  // LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.\n  if ([BA, HY, NS].indexOf(next) !== -1 || current === BB) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB21a Don't break after Hebrew + Hyphen.\n  if (before === HL && HYPHEN.indexOf(current) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB21b Don’t break between Solidus and Hebrew letters.\n  if (current === SY && next === HL) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB22 Do not break between two ellipses, or between letters, numbers or exclamations and ellipsis.\n  if (next === IN && ALPHABETICS.concat(IN, EX, NU, ID, EB, EM).indexOf(current) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB23 Do not break between digits and letters.\n  if (ALPHABETICS.indexOf(next) !== -1 && current === NU || ALPHABETICS.indexOf(current) !== -1 && next === NU) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.\n  if (current === PR && [ID, EB, EM].indexOf(next) !== -1 || [ID, EB, EM].indexOf(current) !== -1 && next === PO) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.\n  if (ALPHABETICS.indexOf(current) !== -1 && PREFIX_POSTFIX.indexOf(next) !== -1 || PREFIX_POSTFIX.indexOf(current) !== -1 && ALPHABETICS.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB25 Do not break between the following pairs of classes relevant to numbers:\n  if (\n  // (PR | PO) × ( OP | HY )? NU\n  [PR, PO].indexOf(current) !== -1 && (next === NU || [OP, HY].indexOf(next) !== -1 && classTypes[afterIndex + 1] === NU) ||\n  // ( OP | HY ) × NU\n  [OP, HY].indexOf(current) !== -1 && next === NU ||\n  // NU ×\t(NU | SY | IS)\n  current === NU && [NU, SY, IS].indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // NU (NU | SY | IS)* × (NU | SY | IS | CL | CP)\n  if ([NU, SY, IS, CL, CP].indexOf(next) !== -1) {\n    var prevIndex = currentIndex;\n    while (prevIndex >= 0) {\n      var type = classTypes[prevIndex];\n      if (type === NU) {\n        return BREAK_NOT_ALLOWED;\n      } else if ([SY, IS].indexOf(type) !== -1) {\n        prevIndex--;\n      } else {\n        break;\n      }\n    }\n  }\n\n  // NU (NU | SY | IS)* (CL | CP)? × (PO | PR))\n  if ([PR, PO].indexOf(next) !== -1) {\n    var _prevIndex = [CL, CP].indexOf(current) !== -1 ? beforeIndex : currentIndex;\n    while (_prevIndex >= 0) {\n      var _type = classTypes[_prevIndex];\n      if (_type === NU) {\n        return BREAK_NOT_ALLOWED;\n      } else if ([SY, IS].indexOf(_type) !== -1) {\n        _prevIndex--;\n      } else {\n        break;\n      }\n    }\n  }\n\n  // LB26 Do not break a Korean syllable.\n  if (JL === current && [JL, JV, H2, H3].indexOf(next) !== -1 || [JV, H2].indexOf(current) !== -1 && [JV, JT].indexOf(next) !== -1 || [JT, H3].indexOf(current) !== -1 && next === JT) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB27 Treat a Korean Syllable Block the same as ID.\n  if (KOREAN_SYLLABLE_BLOCK.indexOf(current) !== -1 && [IN, PO].indexOf(next) !== -1 || KOREAN_SYLLABLE_BLOCK.indexOf(next) !== -1 && current === PR) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB28 Do not break between alphabetics (“at”).\n  if (ALPHABETICS.indexOf(current) !== -1 && ALPHABETICS.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).\n  if (current === IS && ALPHABETICS.indexOf(next) !== -1) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.\n  if (ALPHABETICS.concat(NU).indexOf(current) !== -1 && next === OP || ALPHABETICS.concat(NU).indexOf(next) !== -1 && current === CP) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB30a Break between two regional indicator symbols if and only if there are an even number of regional\n  // indicators preceding the position of the break.\n  if (current === RI && next === RI) {\n    var i = indicies[currentIndex];\n    var count = 1;\n    while (i > 0) {\n      i--;\n      if (classTypes[i] === RI) {\n        count++;\n      } else {\n        break;\n      }\n    }\n    if (count % 2 !== 0) {\n      return BREAK_NOT_ALLOWED;\n    }\n  }\n\n  // LB30b Do not break between an emoji base and an emoji modifier.\n  if (current === EB && next === EM) {\n    return BREAK_NOT_ALLOWED;\n  }\n  return BREAK_ALLOWED;\n};\nvar lineBreakAtIndex = exports.lineBreakAtIndex = function lineBreakAtIndex(codePoints, index) {\n  // LB2 Never break at the start of text.\n  if (index === 0) {\n    return BREAK_NOT_ALLOWED;\n  }\n\n  // LB3 Always break at the end of text.\n  if (index >= codePoints.length) {\n    return BREAK_MANDATORY;\n  }\n  var _codePointsToCharacte = codePointsToCharacterClasses(codePoints),\n    _codePointsToCharacte2 = _slicedToArray(_codePointsToCharacte, 2),\n    indicies = _codePointsToCharacte2[0],\n    classTypes = _codePointsToCharacte2[1];\n  return _lineBreakAtIndex(codePoints, classTypes, indicies, index);\n};\nvar cssFormattedClasses = function cssFormattedClasses(codePoints, options) {\n  if (!options) {\n    options = {\n      lineBreak: 'normal',\n      wordBreak: 'normal'\n    };\n  }\n  var _codePointsToCharacte3 = codePointsToCharacterClasses(codePoints, options.lineBreak),\n    _codePointsToCharacte4 = _slicedToArray(_codePointsToCharacte3, 3),\n    indicies = _codePointsToCharacte4[0],\n    classTypes = _codePointsToCharacte4[1],\n    isLetterNumber = _codePointsToCharacte4[2];\n  if (options.wordBreak === 'break-all' || options.wordBreak === 'break-word') {\n    classTypes = classTypes.map(function (type) {\n      return [NU, AL, SA].indexOf(type) !== -1 ? ID : type;\n    });\n  }\n  var forbiddenBreakpoints = options.wordBreak === 'keep-all' ? isLetterNumber.map(function (isLetterNumber, i) {\n    return isLetterNumber && codePoints[i] >= 0x4e00 && codePoints[i] <= 0x9fff;\n  }) : null;\n  return [indicies, classTypes, forbiddenBreakpoints];\n};\nvar inlineBreakOpportunities = exports.inlineBreakOpportunities = function inlineBreakOpportunities(str, options) {\n  var codePoints = (0, _Util.toCodePoints)(str);\n  var output = BREAK_NOT_ALLOWED;\n  var _cssFormattedClasses = cssFormattedClasses(codePoints, options),\n    _cssFormattedClasses2 = _slicedToArray(_cssFormattedClasses, 3),\n    indicies = _cssFormattedClasses2[0],\n    classTypes = _cssFormattedClasses2[1],\n    forbiddenBreakpoints = _cssFormattedClasses2[2];\n  codePoints.forEach(function (codePoint, i) {\n    output += (0, _Util.fromCodePoint)(codePoint) + (i >= codePoints.length - 1 ? BREAK_MANDATORY : _lineBreakAtIndex(codePoints, classTypes, indicies, i + 1, forbiddenBreakpoints));\n  });\n  return output;\n};\nvar Break = function () {\n  function Break(codePoints, lineBreak, start, end) {\n    _classCallCheck(this, Break);\n    this._codePoints = codePoints;\n    this.required = lineBreak === BREAK_MANDATORY;\n    this.start = start;\n    this.end = end;\n  }\n  _createClass(Break, [{\n    key: 'slice',\n    value: function slice() {\n      return _Util.fromCodePoint.apply(undefined, _toConsumableArray(this._codePoints.slice(this.start, this.end)));\n    }\n  }]);\n  return Break;\n}();\nvar LineBreaker = exports.LineBreaker = function LineBreaker(str, options) {\n  var codePoints = (0, _Util.toCodePoints)(str);\n  var _cssFormattedClasses3 = cssFormattedClasses(codePoints, options),\n    _cssFormattedClasses4 = _slicedToArray(_cssFormattedClasses3, 3),\n    indicies = _cssFormattedClasses4[0],\n    classTypes = _cssFormattedClasses4[1],\n    forbiddenBreakpoints = _cssFormattedClasses4[2];\n  var length = codePoints.length;\n  var lastEnd = 0;\n  var nextIndex = 0;\n  return {\n    next: function next() {\n      if (nextIndex >= length) {\n        return {\n          done: true\n        };\n      }\n      var lineBreak = BREAK_NOT_ALLOWED;\n      while (nextIndex < length && (lineBreak = _lineBreakAtIndex(codePoints, classTypes, indicies, ++nextIndex, forbiddenBreakpoints)) === BREAK_NOT_ALLOWED) {}\n      if (lineBreak !== BREAK_NOT_ALLOWED || nextIndex === length) {\n        var value = new Break(codePoints, lineBreak, lastEnd, nextIndex);\n        lastEnd = nextIndex;\n        return {\n          value: value,\n          done: false\n        };\n      }\n      return {\n        done: true\n      };\n    }\n  };\n};","map":{"version":3,"names":["require","Object","defineProperty","exports","value","LineBreaker","inlineBreakOpportunities","lineBreakAtIndex","codePointsToCharacterClasses","UnicodeTrie","BREAK_ALLOWED","BREAK_NOT_ALLOWED","BREAK_MANDATORY","classes","LETTER_NUMBER_MODIFIER","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_i","Symbol","iterator","_s","next","done","push","err","Array","isArray","TypeError","_Trie","_linebreakTrie","_linebreakTrie2","_interopRequireDefault","_Util","obj","__esModule","default","_toConsumableArray","arr2","from","_classCallCheck","instance","BK","CR","LF","CM","NL","SG","WJ","ZW","GL","SP","ZWJ","B2","BA","BB","HY","CB","CL","CP","EX","IN","NS","OP","QU","IS","NU","PO","PR","SY","AI","AL","CJ","EB","EM","H2","H3","HL","ID","JL","JV","JT","RI","SA","XX","createTrieFromBase64","ALPHABETICS","HARD_LINE_BREAKS","SPACE","PREFIX_POSTFIX","LINE_BREAKS","concat","KOREAN_SYLLABLE_BLOCK","HYPHEN","codePoints","lineBreak","arguments","types","indicies","categories","forEach","codePoint","index","classType","get","indexOf","prev","isAdjacentWithSpaceIgnored","a","b","currentIndex","classTypes","current","n","_next","previousNonSpaceClassType","type","_lineBreakAtIndex","forbiddenBreaks","beforeIndex","afterIndex","before","prevIndex","_prevIndex","_type","count","_codePointsToCharacte","_codePointsToCharacte2","cssFormattedClasses","options","wordBreak","_codePointsToCharacte3","_codePointsToCharacte4","isLetterNumber","map","forbiddenBreakpoints","str","toCodePoints","output","_cssFormattedClasses","_cssFormattedClasses2","fromCodePoint","Break","start","end","_codePoints","required","slice","apply","_cssFormattedClasses3","_cssFormattedClasses4","lastEnd","nextIndex"],"sources":["C:/Users/Sitech/source/repos/SolarCoffe/solar-coffee-frontend/node_modules/css-line-break/dist/LineBreak.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.LineBreaker = exports.inlineBreakOpportunities = exports.lineBreakAtIndex = exports.codePointsToCharacterClasses = exports.UnicodeTrie = exports.BREAK_ALLOWED = exports.BREAK_NOT_ALLOWED = exports.BREAK_MANDATORY = exports.classes = exports.LETTER_NUMBER_MODIFIER = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _Trie = require('./Trie');\n\nvar _linebreakTrie = require('./linebreak-trie');\n\nvar _linebreakTrie2 = _interopRequireDefault(_linebreakTrie);\n\nvar _Util = require('./Util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LETTER_NUMBER_MODIFIER = exports.LETTER_NUMBER_MODIFIER = 50;\n\n// Non-tailorable Line Breaking Classes\nvar BK = 1; //  Cause a line break (after)\nvar CR = 2; //  Cause a line break (after), except between CR and LF\nvar LF = 3; //  Cause a line break (after)\nvar CM = 4; //  Prohibit a line break between the character and the preceding character\nvar NL = 5; //  Cause a line break (after)\nvar SG = 6; //  Do not occur in well-formed text\nvar WJ = 7; //  Prohibit line breaks before and after\nvar ZW = 8; //  Provide a break opportunity\nvar GL = 9; //  Prohibit line breaks before and after\nvar SP = 10; // Enable indirect line breaks\nvar ZWJ = 11; // Prohibit line breaks within joiner sequences\n// Break Opportunities\nvar B2 = 12; //  Provide a line break opportunity before and after the character\nvar BA = 13; //  Generally provide a line break opportunity after the character\nvar BB = 14; //  Generally provide a line break opportunity before the character\nvar HY = 15; //  Provide a line break opportunity after the character, except in numeric context\nvar CB = 16; //   Provide a line break opportunity contingent on additional information\n// Characters Prohibiting Certain Breaks\nvar CL = 17; //  Prohibit line breaks before\nvar CP = 18; //  Prohibit line breaks before\nvar EX = 19; //  Prohibit line breaks before\nvar IN = 20; //  Allow only indirect line breaks between pairs\nvar NS = 21; //  Allow only indirect line breaks before\nvar OP = 22; //  Prohibit line breaks after\nvar QU = 23; //  Act like they are both opening and closing\n// Numeric Context\nvar IS = 24; //  Prevent breaks after any and before numeric\nvar NU = 25; //  Form numeric expressions for line breaking purposes\nvar PO = 26; //  Do not break following a numeric expression\nvar PR = 27; //  Do not break in front of a numeric expression\nvar SY = 28; //  Prevent a break before; and allow a break after\n// Other Characters\nvar AI = 29; //  Act like AL when the resolvedEAW is N; otherwise; act as ID\nvar AL = 30; //  Are alphabetic characters or symbols that are used with alphabetic characters\nvar CJ = 31; //  Treat as NS or ID for strict or normal breaking.\nvar EB = 32; //  Do not break from following Emoji Modifier\nvar EM = 33; //  Do not break from preceding Emoji Base\nvar H2 = 34; //  Form Korean syllable blocks\nvar H3 = 35; //  Form Korean syllable blocks\nvar HL = 36; //  Do not break around a following hyphen; otherwise act as Alphabetic\nvar ID = 37; //  Break before or after; except in some numeric context\nvar JL = 38; //  Form Korean syllable blocks\nvar JV = 39; //  Form Korean syllable blocks\nvar JT = 40; //  Form Korean syllable blocks\nvar RI = 41; //  Keep pairs together. For pairs; break before and after other classes\nvar SA = 42; //  Provide a line break opportunity contingent on additional, language-specific context analysis\nvar XX = 43; //  Have as yet unknown line breaking behavior or unassigned code positions\n\nvar classes = exports.classes = {\n    BK: BK,\n    CR: CR,\n    LF: LF,\n    CM: CM,\n    NL: NL,\n    SG: SG,\n    WJ: WJ,\n    ZW: ZW,\n    GL: GL,\n    SP: SP,\n    ZWJ: ZWJ,\n    B2: B2,\n    BA: BA,\n    BB: BB,\n    HY: HY,\n    CB: CB,\n    CL: CL,\n    CP: CP,\n    EX: EX,\n    IN: IN,\n    NS: NS,\n    OP: OP,\n    QU: QU,\n    IS: IS,\n    NU: NU,\n    PO: PO,\n    PR: PR,\n    SY: SY,\n    AI: AI,\n    AL: AL,\n    CJ: CJ,\n    EB: EB,\n    EM: EM,\n    H2: H2,\n    H3: H3,\n    HL: HL,\n    ID: ID,\n    JL: JL,\n    JV: JV,\n    JT: JT,\n    RI: RI,\n    SA: SA,\n    XX: XX\n};\n\nvar BREAK_MANDATORY = exports.BREAK_MANDATORY = '!';\nvar BREAK_NOT_ALLOWED = exports.BREAK_NOT_ALLOWED = '×';\nvar BREAK_ALLOWED = exports.BREAK_ALLOWED = '÷';\nvar UnicodeTrie = exports.UnicodeTrie = (0, _Trie.createTrieFromBase64)(_linebreakTrie2.default);\n\nvar ALPHABETICS = [AL, HL];\nvar HARD_LINE_BREAKS = [BK, CR, LF, NL];\nvar SPACE = [SP, ZW];\nvar PREFIX_POSTFIX = [PR, PO];\nvar LINE_BREAKS = HARD_LINE_BREAKS.concat(SPACE);\nvar KOREAN_SYLLABLE_BLOCK = [JL, JV, JT, H2, H3];\nvar HYPHEN = [HY, BA];\n\nvar codePointsToCharacterClasses = exports.codePointsToCharacterClasses = function codePointsToCharacterClasses(codePoints) {\n    var lineBreak = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'strict';\n\n    var types = [];\n    var indicies = [];\n    var categories = [];\n    codePoints.forEach(function (codePoint, index) {\n        var classType = UnicodeTrie.get(codePoint);\n        if (classType > LETTER_NUMBER_MODIFIER) {\n            categories.push(true);\n            classType -= LETTER_NUMBER_MODIFIER;\n        } else {\n            categories.push(false);\n        }\n\n        if (['normal', 'auto', 'loose'].indexOf(lineBreak) !== -1) {\n            // U+2010, – U+2013, 〜 U+301C, ゠ U+30A0\n            if ([0x2010, 0x2013, 0x301c, 0x30a0].indexOf(codePoint) !== -1) {\n                indicies.push(index);\n                return types.push(CB);\n            }\n        }\n\n        if (classType === CM || classType === ZWJ) {\n            // LB10 Treat any remaining combining mark or ZWJ as AL.\n            if (index === 0) {\n                indicies.push(index);\n                return types.push(AL);\n            }\n\n            // LB9 Do not break a combining character sequence; treat it as if it has the line breaking class of\n            // the base character in all of the following rules. Treat ZWJ as if it were CM.\n            var prev = types[index - 1];\n            if (LINE_BREAKS.indexOf(prev) === -1) {\n                indicies.push(indicies[index - 1]);\n                return types.push(prev);\n            }\n            indicies.push(index);\n            return types.push(AL);\n        }\n\n        indicies.push(index);\n\n        if (classType === CJ) {\n            return types.push(lineBreak === 'strict' ? NS : ID);\n        }\n\n        if (classType === SA) {\n            return types.push(AL);\n        }\n\n        if (classType === AI) {\n            return types.push(AL);\n        }\n\n        // For supplementary characters, a useful default is to treat characters in the range 10000..1FFFD as AL\n        // and characters in the ranges 20000..2FFFD and 30000..3FFFD as ID, until the implementation can be revised\n        // to take into account the actual line breaking properties for these characters.\n        if (classType === XX) {\n            if (codePoint >= 0x20000 && codePoint <= 0x2fffd || codePoint >= 0x30000 && codePoint <= 0x3fffd) {\n                return types.push(ID);\n            } else {\n                return types.push(AL);\n            }\n        }\n\n        types.push(classType);\n    });\n\n    return [indicies, types, categories];\n};\n\nvar isAdjacentWithSpaceIgnored = function isAdjacentWithSpaceIgnored(a, b, currentIndex, classTypes) {\n    var current = classTypes[currentIndex];\n    if (Array.isArray(a) ? a.indexOf(current) !== -1 : a === current) {\n        var i = currentIndex;\n        while (i <= classTypes.length) {\n            i++;\n            var next = classTypes[i];\n\n            if (next === b) {\n                return true;\n            }\n\n            if (next !== SP) {\n                break;\n            }\n        }\n    }\n\n    if (current === SP) {\n        var _i = currentIndex;\n\n        while (_i > 0) {\n            _i--;\n            var prev = classTypes[_i];\n\n            if (Array.isArray(a) ? a.indexOf(prev) !== -1 : a === prev) {\n                var n = currentIndex;\n                while (n <= classTypes.length) {\n                    n++;\n                    var _next = classTypes[n];\n\n                    if (_next === b) {\n                        return true;\n                    }\n\n                    if (_next !== SP) {\n                        break;\n                    }\n                }\n            }\n\n            if (prev !== SP) {\n                break;\n            }\n        }\n    }\n    return false;\n};\n\nvar previousNonSpaceClassType = function previousNonSpaceClassType(currentIndex, classTypes) {\n    var i = currentIndex;\n    while (i >= 0) {\n        var type = classTypes[i];\n        if (type === SP) {\n            i--;\n        } else {\n            return type;\n        }\n    }\n    return 0;\n};\n\nvar _lineBreakAtIndex = function _lineBreakAtIndex(codePoints, classTypes, indicies, index, forbiddenBreaks) {\n    if (indicies[index] === 0) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    var currentIndex = index - 1;\n    if (Array.isArray(forbiddenBreaks) && forbiddenBreaks[currentIndex] === true) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    var beforeIndex = currentIndex - 1;\n    var afterIndex = currentIndex + 1;\n    var current = classTypes[currentIndex];\n\n    // LB4 Always break after hard line breaks.\n    // LB5 Treat CR followed by LF, as well as CR, LF, and NL as hard line breaks.\n    var before = beforeIndex >= 0 ? classTypes[beforeIndex] : 0;\n    var next = classTypes[afterIndex];\n\n    if (current === CR && next === LF) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    if (HARD_LINE_BREAKS.indexOf(current) !== -1) {\n        return BREAK_MANDATORY;\n    }\n\n    // LB6 Do not break before hard line breaks.\n    if (HARD_LINE_BREAKS.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB7 Do not break before spaces or zero width space.\n    if (SPACE.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB8 Break before any character following a zero-width space, even if one or more spaces intervene.\n    if (previousNonSpaceClassType(currentIndex, classTypes) === ZW) {\n        return BREAK_ALLOWED;\n    }\n\n    // LB8a Do not break between a zero width joiner and an ideograph, emoji base or emoji modifier.\n    if (UnicodeTrie.get(codePoints[currentIndex]) === ZWJ && (next === ID || next === EB || next === EM)) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB11 Do not break before or after Word joiner and related characters.\n    if (current === WJ || next === WJ) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB12 Do not break after NBSP and related characters.\n    if (current === GL) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB12a Do not break before NBSP and related characters, except after spaces and hyphens.\n    if ([SP, BA, HY].indexOf(current) === -1 && next === GL) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB13 Do not break before ‘]’ or ‘!’ or ‘;’ or ‘/’, even after spaces.\n    if ([CL, CP, EX, IS, SY].indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB14 Do not break after ‘[’, even after spaces.\n    if (previousNonSpaceClassType(currentIndex, classTypes) === OP) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB15 Do not break within ‘”[’, even with intervening spaces.\n    if (isAdjacentWithSpaceIgnored(QU, OP, currentIndex, classTypes)) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB16 Do not break between closing punctuation and a nonstarter (lb=NS), even with intervening spaces.\n    if (isAdjacentWithSpaceIgnored([CL, CP], NS, currentIndex, classTypes)) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB17 Do not break within ‘——’, even with intervening spaces.\n    if (isAdjacentWithSpaceIgnored(B2, B2, currentIndex, classTypes)) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB18 Break after spaces.\n    if (current === SP) {\n        return BREAK_ALLOWED;\n    }\n\n    // LB19 Do not break before or after quotation marks, such as ‘ ” ’.\n    if (current === QU || next === QU) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB20 Break before and after unresolved CB.\n    if (next === CB || current === CB) {\n        return BREAK_ALLOWED;\n    }\n\n    // LB21 Do not break before hyphen-minus, other hyphens, fixed-width spaces, small kana, and other non-starters, or after acute accents.\n    if ([BA, HY, NS].indexOf(next) !== -1 || current === BB) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB21a Don't break after Hebrew + Hyphen.\n    if (before === HL && HYPHEN.indexOf(current) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB21b Don’t break between Solidus and Hebrew letters.\n    if (current === SY && next === HL) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB22 Do not break between two ellipses, or between letters, numbers or exclamations and ellipsis.\n    if (next === IN && ALPHABETICS.concat(IN, EX, NU, ID, EB, EM).indexOf(current) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB23 Do not break between digits and letters.\n    if (ALPHABETICS.indexOf(next) !== -1 && current === NU || ALPHABETICS.indexOf(current) !== -1 && next === NU) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB23a Do not break between numeric prefixes and ideographs, or between ideographs and numeric postfixes.\n    if (current === PR && [ID, EB, EM].indexOf(next) !== -1 || [ID, EB, EM].indexOf(current) !== -1 && next === PO) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB24 Do not break between numeric prefix/postfix and letters, or between letters and prefix/postfix.\n    if (ALPHABETICS.indexOf(current) !== -1 && PREFIX_POSTFIX.indexOf(next) !== -1 || PREFIX_POSTFIX.indexOf(current) !== -1 && ALPHABETICS.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB25 Do not break between the following pairs of classes relevant to numbers:\n    if (\n    // (PR | PO) × ( OP | HY )? NU\n    [PR, PO].indexOf(current) !== -1 && (next === NU || [OP, HY].indexOf(next) !== -1 && classTypes[afterIndex + 1] === NU) ||\n    // ( OP | HY ) × NU\n    [OP, HY].indexOf(current) !== -1 && next === NU ||\n    // NU ×\t(NU | SY | IS)\n    current === NU && [NU, SY, IS].indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // NU (NU | SY | IS)* × (NU | SY | IS | CL | CP)\n    if ([NU, SY, IS, CL, CP].indexOf(next) !== -1) {\n        var prevIndex = currentIndex;\n        while (prevIndex >= 0) {\n            var type = classTypes[prevIndex];\n            if (type === NU) {\n                return BREAK_NOT_ALLOWED;\n            } else if ([SY, IS].indexOf(type) !== -1) {\n                prevIndex--;\n            } else {\n                break;\n            }\n        }\n    }\n\n    // NU (NU | SY | IS)* (CL | CP)? × (PO | PR))\n    if ([PR, PO].indexOf(next) !== -1) {\n        var _prevIndex = [CL, CP].indexOf(current) !== -1 ? beforeIndex : currentIndex;\n        while (_prevIndex >= 0) {\n            var _type = classTypes[_prevIndex];\n            if (_type === NU) {\n                return BREAK_NOT_ALLOWED;\n            } else if ([SY, IS].indexOf(_type) !== -1) {\n                _prevIndex--;\n            } else {\n                break;\n            }\n        }\n    }\n\n    // LB26 Do not break a Korean syllable.\n    if (JL === current && [JL, JV, H2, H3].indexOf(next) !== -1 || [JV, H2].indexOf(current) !== -1 && [JV, JT].indexOf(next) !== -1 || [JT, H3].indexOf(current) !== -1 && next === JT) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB27 Treat a Korean Syllable Block the same as ID.\n    if (KOREAN_SYLLABLE_BLOCK.indexOf(current) !== -1 && [IN, PO].indexOf(next) !== -1 || KOREAN_SYLLABLE_BLOCK.indexOf(next) !== -1 && current === PR) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB28 Do not break between alphabetics (“at”).\n    if (ALPHABETICS.indexOf(current) !== -1 && ALPHABETICS.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB29 Do not break between numeric punctuation and alphabetics (“e.g.”).\n    if (current === IS && ALPHABETICS.indexOf(next) !== -1) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB30 Do not break between letters, numbers, or ordinary symbols and opening or closing parentheses.\n    if (ALPHABETICS.concat(NU).indexOf(current) !== -1 && next === OP || ALPHABETICS.concat(NU).indexOf(next) !== -1 && current === CP) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB30a Break between two regional indicator symbols if and only if there are an even number of regional\n    // indicators preceding the position of the break.\n    if (current === RI && next === RI) {\n        var i = indicies[currentIndex];\n        var count = 1;\n        while (i > 0) {\n            i--;\n            if (classTypes[i] === RI) {\n                count++;\n            } else {\n                break;\n            }\n        }\n        if (count % 2 !== 0) {\n            return BREAK_NOT_ALLOWED;\n        }\n    }\n\n    // LB30b Do not break between an emoji base and an emoji modifier.\n    if (current === EB && next === EM) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    return BREAK_ALLOWED;\n};\n\nvar lineBreakAtIndex = exports.lineBreakAtIndex = function lineBreakAtIndex(codePoints, index) {\n    // LB2 Never break at the start of text.\n    if (index === 0) {\n        return BREAK_NOT_ALLOWED;\n    }\n\n    // LB3 Always break at the end of text.\n    if (index >= codePoints.length) {\n        return BREAK_MANDATORY;\n    }\n\n    var _codePointsToCharacte = codePointsToCharacterClasses(codePoints),\n        _codePointsToCharacte2 = _slicedToArray(_codePointsToCharacte, 2),\n        indicies = _codePointsToCharacte2[0],\n        classTypes = _codePointsToCharacte2[1];\n\n    return _lineBreakAtIndex(codePoints, classTypes, indicies, index);\n};\n\nvar cssFormattedClasses = function cssFormattedClasses(codePoints, options) {\n    if (!options) {\n        options = { lineBreak: 'normal', wordBreak: 'normal' };\n    }\n\n    var _codePointsToCharacte3 = codePointsToCharacterClasses(codePoints, options.lineBreak),\n        _codePointsToCharacte4 = _slicedToArray(_codePointsToCharacte3, 3),\n        indicies = _codePointsToCharacte4[0],\n        classTypes = _codePointsToCharacte4[1],\n        isLetterNumber = _codePointsToCharacte4[2];\n\n    if (options.wordBreak === 'break-all' || options.wordBreak === 'break-word') {\n        classTypes = classTypes.map(function (type) {\n            return [NU, AL, SA].indexOf(type) !== -1 ? ID : type;\n        });\n    }\n\n    var forbiddenBreakpoints = options.wordBreak === 'keep-all' ? isLetterNumber.map(function (isLetterNumber, i) {\n        return isLetterNumber && codePoints[i] >= 0x4e00 && codePoints[i] <= 0x9fff;\n    }) : null;\n\n    return [indicies, classTypes, forbiddenBreakpoints];\n};\n\nvar inlineBreakOpportunities = exports.inlineBreakOpportunities = function inlineBreakOpportunities(str, options) {\n    var codePoints = (0, _Util.toCodePoints)(str);\n    var output = BREAK_NOT_ALLOWED;\n\n    var _cssFormattedClasses = cssFormattedClasses(codePoints, options),\n        _cssFormattedClasses2 = _slicedToArray(_cssFormattedClasses, 3),\n        indicies = _cssFormattedClasses2[0],\n        classTypes = _cssFormattedClasses2[1],\n        forbiddenBreakpoints = _cssFormattedClasses2[2];\n\n    codePoints.forEach(function (codePoint, i) {\n        output += (0, _Util.fromCodePoint)(codePoint) + (i >= codePoints.length - 1 ? BREAK_MANDATORY : _lineBreakAtIndex(codePoints, classTypes, indicies, i + 1, forbiddenBreakpoints));\n    });\n\n    return output;\n};\n\nvar Break = function () {\n    function Break(codePoints, lineBreak, start, end) {\n        _classCallCheck(this, Break);\n\n        this._codePoints = codePoints;\n        this.required = lineBreak === BREAK_MANDATORY;\n        this.start = start;\n        this.end = end;\n    }\n\n    _createClass(Break, [{\n        key: 'slice',\n        value: function slice() {\n            return _Util.fromCodePoint.apply(undefined, _toConsumableArray(this._codePoints.slice(this.start, this.end)));\n        }\n    }]);\n\n    return Break;\n}();\n\nvar LineBreaker = exports.LineBreaker = function LineBreaker(str, options) {\n    var codePoints = (0, _Util.toCodePoints)(str);\n\n    var _cssFormattedClasses3 = cssFormattedClasses(codePoints, options),\n        _cssFormattedClasses4 = _slicedToArray(_cssFormattedClasses3, 3),\n        indicies = _cssFormattedClasses4[0],\n        classTypes = _cssFormattedClasses4[1],\n        forbiddenBreakpoints = _cssFormattedClasses4[2];\n\n    var length = codePoints.length;\n    var lastEnd = 0;\n    var nextIndex = 0;\n\n    return {\n        next: function next() {\n            if (nextIndex >= length) {\n                return { done: true };\n            }\n            var lineBreak = BREAK_NOT_ALLOWED;\n            while (nextIndex < length && (lineBreak = _lineBreakAtIndex(codePoints, classTypes, indicies, ++nextIndex, forbiddenBreakpoints)) === BREAK_NOT_ALLOWED) {}\n\n            if (lineBreak !== BREAK_NOT_ALLOWED || nextIndex === length) {\n                var value = new Break(codePoints, lineBreak, lastEnd, nextIndex);\n                lastEnd = nextIndex;\n                return { value: value, done: false };\n            }\n\n            return { done: true };\n        }\n    };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}